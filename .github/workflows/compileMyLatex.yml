name: Build LaTeX document and Release PDF
#
# Version: 11222024
#
# Is executed at gooTeX script's prompt. 
# ############################
#      Pamela M. Marcum      #
#  first created: 07/14/2024 #
# ############################
# Controls when the action will run.
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
# https://mrturkmen.com/posts/build-release-latex/
# https://github.com/PHPirates/travis-ci-latex-pdf/blob/master/.github/workflows/texlive.yml
# https://github.com/teatimeguest/setup-texlive-action  includes caching
#
on:
  workflow_dispatch:
    inputs: 
      file2compile:
         description: "Name of .tex file to compile, without the .tex part"
         required: true
         default: "myPaper"
      folderid:
         description: "Google ID number of the folder in which to upload the compiled files"
         required: true
         default: "1gs2IWLDL4FOIJLoNGGuUDnMPfGpyYmV1"
# Allow only one concurrent deployment, skipping runs quesed between the run in progress and most recent queued
#concurrency:
#  group: "pages"
#  cancel-in-progress: true
#  #
jobs:
  # followed: https://dev.to/dessygil/
  # how-to-automatically-update-resume-on-your-personal-site-from-overleaf-1fld
  # https://superuser.com/questions/1455483/how-to-get-wsl-use-git-bash-to-run-a-latexmk-command
  # https://www.overleaf.com/learn/latex/TeX_engine_command_line_options_for_pdfTeX%2C_XeTeX_and_LuaTeX

  #_______________________________________________________________________
  #|                                                                      |
  #|     STRIP OUT UNUSED REFERENCES AND CONSTRUCT A PRUNED BIB FILE      |
  #|______________________________________________________________________|
  #    runs parallel with compressImages
  pruneBib:
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write
      #
    steps:
      - name: Clone repo
        uses: actions/checkout@v4
        #
      - name: Prune the bib file
        # https://www.baeldung.com/linux/regex-matching
        # https://askubuntu.com/questions/1502281/using-grep-to-search-for-line-that-begins-with-a-variable-whose-value-is-a-dolla
        # https://stackoverflow.com/questions/13210880/replace-one-substring-for-another-string-in-shell-script
        # going to strip out all used citations and make a pruned.bib file that can be used as final bib file for submission
        # purposes rather than having to use whole master bib file.  based on stand-alone "pruneMyBibfile" github action file
        id: pruneBib
        run: |
           rootname=${{ github.event.inputs.file2compile }}
           # determine if the pruned bib file is already being used in the document. If so, we should bypass 
           # all the below because pruned bib file does not need to be created.
           # First, make sure that there is a bibliography in the document.  Otherwise, don't even continue
           makeNewPrunedBib=false
           if [[ "$(grep -Eq "^ *\\\\bibliography[{]" ${rootname}.tex)$?" == 0 ]]; then makeNewPrunedBib=true; fi
           # next, see if pruned.bib is already being used.  If so, then bail out now and dont try to recreate the pruned.bib
           if [[ "$(grep -Eq "^ *\\\\bibliography[{]pruned([.]bib)?" ${rootname}.tex)$?" == 0 ]]; then makeNewPrunedBib=false; fi         
           #
           if $makeNewPrunedBib; then
              echo "madePruned=T" >> $GITHUB_OUTPUT
              rm -f pruned.bib
              touch pruned.bib
              # get a list of bib files used in this document:
              readarray -t bibfiles < <( grep -E "^ *\\\\bibliography[{][^}]+[}]" "${rootname}.tex" | \
                sed -r 's/^ *\\bibliography[{]//i' | sed -r 's/} *$//' | sed -r 's/ *//g' )
              # the .bib extension might not have been included in the bibfile name, so make sure the extension is there
              bibfilesstr=$( printf "%s" "${bibfiles[@]}" )
              bibfilesstr=$( sed -r 's/\.bib//g' <<<$bibfilesstr | sed -r 's/,/\.bib,/g' | sed -r 's/,/ /g' )
              bibfilesstr+='.bib'
              bibfiles=( $(IFS=" " echo "$bibfilesstr") )
              # make sure the bib files are not duplicated
              readarray -t bibfiles < <(printf '%s\n' "${bibfiles[@]}" | awk '!seen[$0]++')
              #
              # =========== Now go through the .tex files and gather up all cited references
              readarray -t cites < <( grep "\cite" *.tex | sed -r 's/^[^ ]+\.tex: *//' | sed -r 's/^%.*$//' | \
                sed -r 's/\a//g' | sed -r 's/\t//g' | sed -r 's/\\cite/\a/ig' | sed -r 's/\a[^{]*(\{[^}]*\})*\{([^}]+)\}/\a\2\t/g' | \
                sed -r 's/^[^\a]+\a//' | sed -r 's/\t[^\a]+$//' | sed -r 's/\t[^\a]+\a/ /g' | sed -r 's/[,]/ /g' | sed -r 's/^[0-9]+$//g' )
              citesstr=$( printf "%s " "${cites[@]}" )
              citesstr=$( sed -r 's/[\a\t]/ /g' <<<$citesstr |  sed -r 's/  +/ /g' | sed -r 's/ [^ ]*[:(){}\\/]+[^ ]* / /g' )
              # any plus signs in the citation bib code causes problems because they are not escaped. The  below substitutes all plus signs and 
              # replaces with escaped pluses, so that grep will perform search on literal plus sign rather than interpret plus sign as meaning "search
              # for 2 or more of the character to left of plus sign". Periods also cause problems, as do dashes, and have to likewise be treated. 
              citesstr=$( sed -r 's/\+/\\+/g' <<<"$citesstr" | sed -r 's/\-/\\-/g' | sed -r 's/\./\\\./g' )
              # break the references into individual entries that go into the array "cites"
              cites=( $(IFS=" " echo "$citesstr") )
              # get a sorted unique list
              cites=( $(echo "${cites[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ') )
              # Search for each of the cites in the bibfile(s) and extract the relevant full bib item for that citation, to 
              # put into the pruned bibfile              
              for (( i=0; i<${#cites[@]}; i++ )); do grep -zoE "@[^{]+\{ *${cites[$i]}[^@]+" "${bibfiles[@]}" | tr '\0' '\n' >> pruned.bib; done
              sed -ri 's/^[^@]+@/@/g;s/^([^@}])/  \1/g' pruned.bib
            else
              echo "madePruned=F" >> $GITHUB_OUTPUT
            fi
        continue-on-error: true
        #
      - name: upload pruned.bib to google drive
        uses: nextDriveIoE/google-drive-upload-action@v2
        if: ${{ always() && steps.pruneBib.outputs.madePruned == 'T' }}
        with:
          target: 'pruned.bib'
          credentials: ${{ secrets.SERVICE_ACCOUNT_CREDENTIALS }}
          parent_folder_id: ${{ github.event.inputs.folderid }}
          overwrite: true
        continue-on-error: true
        #
      - name: Make pruned bibfile available to other jobs
        if: ${{ always() && steps.pruneBib.outputs.madePruned == 'T' }}
        uses: actions/upload-artifact@v4
        with:
          name: pruned-bib-artifact
          path: pruned.bib
          overwrite: true
        continue-on-error: true

  #_______________________________________________________________________
  #|                                                                      |
  #|         COMPRESS THE IMAGES IF THERE ARE UNCOMPRESSED ONES           |
  #|______________________________________________________________________|
  #    runs parallel with pruned-bib
  compressImages:
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write
      #
    steps:
      - name: Clone repo
        uses: actions/checkout@v4
        #
      - name: Install ImageMagick
        uses: mfinelli/setup-imagemagick@v5
        with:
          cache: true
        continue-on-error: true
        #
      - name: Search for uncompressed images, and compress them
        id: compressImages
        run: |
           bigfile=500000
           minDpi=150  # optimal dpi for pdf files
           maxWidthInches=6.5   #inches
           maxHeightInches=9.0  #inches
           maxWidth=$(echo "(($minDpi * $maxWidthInches)+0.5)/1" | bc)
           maxWidth=${maxWidth%.*}
           maxHeight=$(echo "(($minDpi * $maxHeightInches)+0.5)/1" | bc)
           maxHeight=${maxHeight%.*}
           shopt -s globstar
           nUncompressed=0
           firstTimeThru="T"
           for imagefile in **/*UNCOMPRESSED.*; do
              echo "the file being considered is: $imagefile"
              newname=$(echo "${imagefile}" | sed 's/UNCOMPRESSED//')
              pdfname=$(echo "${newname}" | sed 's/\..*$/\.pdf/')
              fileSize=$( stat -c %s -- "${imagefile}"  )             
              nUncompressed+=1
              if [[ -f "${imagefile}" && ! -L "${imagefile}" && "$fileSize" -gt "$bigfile" && "${imagefile}" =~ UNCOMPRESSED\. ]]; then                 
                  # Get the current dimensions of the image
                  magick identify -format "%w %h" "${imagefile}"
                  dimensions=$(magick identify -format "%w %h" "${imagefile}")
                  read -r origWidth origHeight <<< "$dimensions"
                  # determine which, if either, dimension exceeds the max desirable size (origWidth origHeight)
                  if [[ "$origWidth" -gt "$origHeight" && "$origWidth" -gt "$maxWidth" ]]; then
                      newWidth=$maxWidth
                      newHeight=$(echo "(($origHeight * $newWidth) / $origWidth) + 0.5" | bc)
                      newHeight=${newHeight%.*}
                  elif [[ "$origWidth" -lt "$origHeight" && "$origHeight" -gt "$maxHeight" ]]; then
                      newHeight=$maxHeight
                      newWidth=$(echo "(($origWidth * $newHeight) / $origHeight) + 0.5" | bc)
                      newWidth=${newWidth%.*}
                  elif [[ "$origWidth" -gt "$maxWidth" ]]; then
                      newWidth=$maxWidth
                      newHeight=$(echo "(($origHeight * $newWidth) / $origWidth) + 0.5" | bc)
                      newHeight=${newHeight%.*}
                  elif [[ "$origHeight" -gt "$maxHeight" ]]; then
                      newHeight=$origHeight
                      newWidth=$(echo "(($origWidth * $newHeight) / $origHeight) + 0.5" | bc)
                      newWidth=${newWidth%.*}
                  else
                      newHeight=$origHeight
                      newWidth=$origWidth
                  fi
                  qualityValue=82
                  # Note: the quality value seems to not matter at all.  The size seems to be the main factor behind the size of the file.
                  magick mogrify -filter Triangle -define filter:support=2 -unsharp 0.25x0.08+8.3+0.045 -dither None \
                    -quality ''"${qualityValue}"'' -define jpeg:fancy-upsampling=off -define png:compression=filter=5 \
                    -define png:compression-level=9 -define png:compression-strategy=1 -define png:exclude-chunk=all \
                    -interlace none -colorspace sRGB -strip -thumbnail ''"${newWidth}x${newHeight}>"'' "${imagefile}"
                  if [[ $firstTimeThru == 'T' ]]; then
                     touch "compressedList.txt"
                     firstTimeThru='F'
                  fi
                  mv -f "${imagefile}" "${newname}"
                  echo "${newname}" >> "compressedList.txt"
              elif [[ -f "${imagefile}" && ! -L "${imagefile}" && "${imagefile}" =~ UNCOMPRESSED\. ]]; then
                  if [[ $firstTimeThru == 'T' ]]; then
                     touch "compressedList.txt"
                     firstTimeThru='F'
                  fi
                  mv -f "${imagefile}" "${newname}"
                  echo "${newname}" >> "compressedList.txt"
              fi
           done
           if [[ $firstTimeThru == 'F' ]]; then
              # if firstTimeThru is F, means that the above loop never executed. 
              tar -cvf compressedFiles.tar -T compressedList.txt
              rm -f compressedList.txt
           fi
        continue-on-error: true
        #
      - name: Make newly compressed images folder available to other jobs
        if: ${{ always() && hashFiles('compressedFiles.tar') }}
        uses: actions/upload-artifact@v4
        with:
          name: images-tar-artifact
          path: compressedFiles.tar
          overwrite: true
        continue-on-error: true
        
  #_______________________________________________________________________
  #|                                                                      |
  #|                        COMPILE THE FILE                              |
  #|______________________________________________________________________|
  #    when this is running, nothing else is running in parallel
  #  The STATUS file is 4 lines, timestamp, joblink (w/ job link value inserted), "FAILED",  status**
  #  If the compilation fails, the STATUS file will have a status of "precomp" for "precompile"
  build_latex:
    needs: [compressImages]
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write
      #
    steps:
      - name: Clone repo
        uses: actions/checkout@v4
        #
      - name: Download newly compressed images tar file
        uses: actions/download-artifact@v4
        with:
          name: images-tar-artifact
        continue-on-error: true
        #
      - uses: qoomon/actions--context@v4
        #
      - name: Create status files
        id: job-id
        #env:
        #  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create the status file
           rootname=${{ github.event.inputs.file2compile }}
           rm -f ${rootname}STATUS*.txt
           touch "${rootname}STATUS-1.txt"
           echo "$(date +'%Y-%m-%dT%H:%M:%SZ') $(($(date +%s%N)/1000000))" >> "${rootname}STATUS-1.txt"
           echo "${GITHUB_JOB_URL}" >> "${rootname}STATUS-1.txt"
           echo "PLACEHOLDER" >> "${rootname}STATUS-1.txt"
           echo "precomp"   >> "${rootname}STATUS-1.txt"
        continue-on-error: true 
        #
      - name: get newly compressed images
        if: ${{ always() && hashFiles('compressedFiles.tar') }}
        run: |
          tar -xvf compressedFiles.tar > filelist.txt
          # remove the original images that were uncompressed
          sed -ri "s/\.([^\n]+)(\n|$)/UNCOMPRESSED\.\1/g" "filelist.txt"
          # use the file to remove the files
          rm $( cat filelist.txt )
          ls -la FIGURES
        continue-on-error: true 
        #
        # https://tex.stackexchange.com/questions/245982/differences-between-texlive-packages-in-linux
        # https://www.overleaf.com/learn/latex/TeX_engine_command_line_options_for_pdfTeX%2C_XeTeX_and_LuaTeX
        # https://github.com/teatimeguest/setup-texlive-action/tree/v3.3.0
        # >>>>>>>>>>>>>>>>>>>>>>>> IMPORTANT NOTE ABOUT TEMPORARY FIX <<<<<<<<<<<<<<<<<<<<<<<<<<
        # array.sty is incompatable with latest version of texlive and/or aastex. Until aastex is fixed in mid-2025,
        # will need to keep this fix of using version 2020 instead of latest version. array.sty is used in WorPT files.
        # See more details here:   https://github.com/AASJournals/AASTeX60/issues/149
      - name: Install texlive
        uses: teatimeguest/setup-texlive-action@v3
        with:
          version: 2023
          packages:
             collection-basic
             collection-bibtexextra
             collection-binextra
             collection-context
             collection-fontsextra
             collection-fontsrecommended
             collection-formatsextra
             collection-fontutils
             collection-latex
             collection-latexextra
             collection-latexrecommended
             collection-mathscience
             collection-metapost
             collection-pictures
             collection-plaingeneric
             collection-pstricks
             collection-publishers
             collection-texworks
             amsfonts
             graphics
             scrextend
             rotating
             tools
             threeparttable
             units
          cache: true
        continue-on-error: true
        #
      - name: Compile paper
        # https://stackoverflow.com/questions/418896/how-to-redirect-output-to-a-file-and-stdout
        id: compilation
        run: |
           rootname=${{ github.event.inputs.file2compile }}
           rm -f compileOut.txt
           rm -f "${rootname}.pdf"
           rm -f latexmkrc
           echo "$ENV{'TZ'}='America/Los_Angeles';" > latexmkrc
           latexmk -bibtex -verbose -f -g -pdf -time -file-line-error -view=none -synctex=1 \
             -interaction=nonstopmode "${rootname}.tex" 2>&1 | tee compileOut.txt
           echo "______________________________________________________________________________"
           cat compileOut.txt
           echo "______________________________________________________________________________"
           #
           # clean up pdf files after compilation
           # move pdf into final filename
           echo "PDF=${rootname}.pdf" >> $GITHUB_ENV
        continue-on-error: true
        #
      - name: upload hi res pdf to google drive
        if: ${{ always() && hashFiles(env.PDF) }}
        uses: nextDriveIoE/google-drive-upload-action@v2
        with:
          target:  ${{ env.PDF }}
          credentials: ${{ secrets.SERVICE_ACCOUNT_CREDENTIALS }}
          parent_folder_id: ${{ github.event.inputs.folderid }}
          overwrite: true
        continue-on-error: true
        #
      - name: upload STATUS-1 file that signifies latex compilation to google drive
        uses: nextDriveIoE/google-drive-upload-action@v2
        with:
          target: ${{ github.event.inputs.file2compile }}STATUS-1.txt
          credentials: ${{ secrets.SERVICE_ACCOUNT_CREDENTIALS }}
          parent_folder_id: ${{ github.event.inputs.folderid }}
          overwrite: true
        continue-on-error: true
        #
      - name: Make STATUS-1 file available to other jobs
        uses: actions/upload-artifact@v4
        with:
          name: status1-artifact
          path: ${{ github.event.inputs.file2compile }}STATUS-1.txt
          overwrite: true
        continue-on-error: true
        #
      - name: Make PDF available to other jobs
        if: ${{ always() && hashFiles(env.PDF) }}
        uses: actions/upload-artifact@v4
        with:
          name: pdf-artifact
          path: ${{ env.PDF }}
          overwrite: true
        continue-on-error: true
        #
      - name: Make compilation output available to other jobs
        if: ${{ always() && hashFiles('compileOut.txt') }}
        uses: actions/upload-artifact@v4
        with:
          name: postcompilation-rawLog-artifact
          path: compileOut.txt
          overwrite: true
        continue-on-error: true

  #_______________________________________________________________________
  #|                                                                      |
  #|                     PROCESS COMPILATION OUTPUT                       |
  #|______________________________________________________________________|
  #  The STATUS file is 4 lines: timestamp, joblink, processed compilation error link and status**
  #  **If there is a serious compilation error, html option is chosen. Otherwise, pdf. 
  processLogFile:
    needs: [pruneBib,build_latex]
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write
      #
    steps:
      - name: Clone repo
        uses: actions/checkout@v4
        #
      - name: Download status-1 file after compilation
        uses: actions/download-artifact@v4
        with:
          name: status1-artifact
        continue-on-error: true
        #
      - name: Download raw log file after compilation
        uses: actions/download-artifact@v4
        with:
          name: postcompilation-rawLog-artifact
        continue-on-error: true
        #        
      - name: Capture full compilation output
        run: |
           # =============================================================================
           # open up the compilation output log file and strip out a lot of unnecessary stuff
           # =============================================================================
           rootname=${{ github.event.inputs.file2compile }}
           fatalErrors=false
           fileliststr=''
           # ....... if the pdf file was generated, then the errors must have NOT been fatal.
           if [ ! -f  "${rootname}.pdf" ]; then fatalErrors=true; fi         
           # ....... prepare the compilation log for processing by first removing all end-of-line characters
           rm -f errout.txt
           touch errout.txt
           # ....... just to be safe, remove all \a, \t and \x0 because we use these as special markers later
           sed -ri 's/[\x0\a\t]/ /g' compileOut.txt
           # ....... before removing end of line carriage returns, mark the citations that could not be found in the bib file(s)
           sed -r 's/^ *(Citation `[[:print:]]*on input line )([0-9][0-9]*) *$/ \x0\2-BIB-\1\2\.\a/g' compileOut.txt >> errout.txt
           # ....... before removing end of line carriage returns, mark "on input line" phrases so they can be easily found (and/or avoided) later: 
           rm -f tmp.txt && sed -r 's/on input line ([0-9][0-9]*)/on input line \t\1/g' errout.txt > tmp.txt && mv -f tmp.txt errout.txt
           # ....... also indicate any pdfTeX error that will not have a line number and involves explamation marks which mess sed up
           rm -f tmp.txt && sed -r 's/pdfTeX error: / \x0 0-ERROR-pdfTeX error:/g' errout.txt > tmp.txt && mv -f tmp.txt errout.txt
           rm -f tmp.txt && sed -r 's/failed *$/failed\a/g' errout.txt > tmp.txt && mv -f tmp.txt errout.txt
           # ....... now remove all the end of line returns
           rm -f tmp.txt && tr -d "\n" < errout.txt > tmp.txt && mv -f tmp.txt errout.txt
           # ....... remove a lot of the lines that have noithing to do with errors and warnings, to make the next searches go faster
           sed -ri 's/[(]\/home\/runner[^)][^)]*[)]/ /g' errout.txt
           sed -ri 's/<\/home\/runner[^>][^>]*\>/ /g' errout.txt
           # ....... remove [] [] that are just clutter in the file
           sed -ri 's/\[ *\]/ /g' errout.txt
           # ....... remove the ((( left behind in the above substitutions
           sed -ri 's/[(] *[(]/ /g' errout.txt
           # ....... remove the )))) left behind in above subs
           sed -ri 's/[)] *[)]/ /g' errout.txt
           # ....... remove all multiple white spaces to a single white space
           sed -ri 's/  */ /g' errout.txt           
           rm -f tmp.txt
           sed -r 's/(\.[^.][^.]*\.tex:[0-9][0-9]*:[^.\t][^.\t]*\t)([0-9][0-9]*)([^.]*\.)/\x0\2-ERROR-\1\2\3\a/g' errout.txt > tmp.txt
           mv -f tmp.txt errout.txt
           rm -f tmp.txt
           sed -r 's/([^:][^:][^:])(LaTeX )((Error)|(Warning))(:[^.\t][^.\t]*\t)([0-9][0-9]*)([^.]*\.)/\1\x0\7-\3-\2\3\6\7\8\a/g' errout.txt >> tmp.txt
           mv -f tmp.txt errout.txt
           sed -ri 's/\-Error\-/-ERROR-/g' errout.txt
           sed -ri 's/\-Warning\-/-WARNING-/g' errout.txt
           rm -f tmp.txt
           sed -r 's/([^-])(\.[^.][^.]*\.tex:)([0-9][0-9]*)(:[^.\t][^.\t]*\.)/\1\x0\3-ERROR-\2\3\4\a/g' errout.txt > tmp.txt
           mv -f tmp.txt errout.txt
           sed -ri 's/^[^\x0]*\x0//' errout.txt
           sed -ri 's/\a[^\a]*$//' errout.txt
           # ....... remove all the \t placeholders
           sed -ri 's/\t//g' errout.txt
           sed -ri 's/\a[^\x0]*\x0 */\n/g' errout.txt
           # the next step, sorting the entries, does not work as expected unless all the white space is gone, so replace white space with \a
           sed -ri 's/ /\a/g' errout.txt
           # ....... sort and remove redundances in the error/warning list
           rm -f tmp.txt
           cat errout.txt | sort -r -t- -g -k1,1n -k2 -s | uniq | sed -r 's/\a/ /g' > tmp.txt
           mv -f tmp.txt errout.txt
           #
           # =============================================================================
           # remove lines in the output that are unrelated to the latex compilation itself
           # =============================================================================
           readarray -t sorted < errout.txt
           #  #######################   START CONSOLIDATING THE ERRORS ###################
           rm -f tout.txt
           touch tout.txt
           errtypes=("ERROR" "WARNING" "BIB")
           banners=("FATAL ERRORS" "WARNINGS" "CITATION ISSUES")
           for (( i=0; i<${#errtypes[@]}; i++ )); do
              echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
              echo "              ${banners[$i]} IN ${rootname}.tex" >> tout.txt
              echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
              issue=""           
              for (( j=0; j<${#sorted[@]}; j++ )); do
                  if [[ "${sorted[$j]}" =~ "-${errtypes[$i]}-" ]]; then 
                     issue="${sorted[$j]}"
                     if [[ "${errtypes[$i]}" =~ "ERROR" ]]; then fatalErrors=true; fi
                     break;
                  fi
              done
              # if there were no issues, then put 'none'
              if [[ "$issue" = "" ]]; then echo "      none" >> tout.txt; fi
              while  [ "$issue" != "" ]; do
                  linenum=$( sed -r 's/^([0-9][0-9]*)\-.*/\1/' <<<"$issue" )
                  if [[ $linenum > 0 ]]; then
                     # look for all occurances of this line number in the error/warning list
                     for (( j=0; j<${#sorted[@]}; j++ )); do
                        if [[ "$( grep -q -E -- "^$linenum-" <<<"${sorted[$j]}" )$?" == 0 ]]; then
                           line="$( echo "${sorted[$j]}" | sed -r 's/^[0-9][0-9]*\-[A-Z][A-Z]*\-//' )"
                           echo $line >> tout.txt
                           # remove this item from the list
                           sorted[$j]="DONE"
                        fi
                     done
                     # now look up the line in the .tex file and place underneath
                     echo "line #$linenum ----------------------- " >> tout.txt
                     head -n $linenum "${rootname}.tex" | tail -1 >> tout.txt
                  else
                     # look up where this line is in the list and remove it from the list
                     for (( j=0; j<${#sorted[@]}; j++ )); do
                        if [[ "${sorted[$j]}" =~ "$issue" ]]; then
                           line="$( echo "${sorted[$j]}" | sed -r 's/^ *[0-9][0-9]*\-[A-Z][A-Z]*\-//' )"
                           echo $line >> tout.txt
                           # remove from list
                          sorted[$j]="DONE"
                         fi
                     done
                  fi
                  # See if any more issue remain in the list and need to be processed in the next loop iteration
                  issue=""
                  for (( j=0; j<${#sorted[@]}; j++ )); do
                     if [[ "${sorted[$j]}" =~ "-${errtypes[$i]}-" ]]; then issue="${sorted[$j]}"; break; fi
                  done
                  echo "._______________________________________________________________________" >> tout.txt
              done
           done
           echo "FATALERRORS=$fatalErrors" >> $GITHUB_ENV
        continue-on-error: true
        #
      - name: Gather up list of references
        id: reflist
        run: |
           # https://stackoverflow.com/questions/57788813/-return-0-if-no-match
           # squash.io/extracting=numbers-from-strings-in-bash
           # https://stackoverflow.com/questions/17883661/how-to-extract-numbers-from-a-string
           # https://stackoverflow.com/questions/2624300/save-part-of-matching-pattern-to-variable
           rootname=${{ github.event.inputs.file2compile }}
           echo "" >> tout.txt
           echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
           echo "              LIST OF REFERENCES IN ${rootname}.tex" >> tout.txt
           echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
           # create an array of just the bibcodes
           # extract just the bibcode from the pruned bibfile to use for another file that will be used in the summary
           readarray -t cites < <( grep "@" pruned.bib | sed -r 's/^[^ ]+\.bib: *//' | sed -r 's/@[^\{]+\{//' | sed -r 's/,//' )
           if [[ ${#cites[@]} -gt 0 ]]; then echo "Number of citations: ${#cites[@]}" >> tout.txt; fi
           for (( i=0; i<${#cites[@]}; i++ )); do echo "${cites[$i]}" >> tout.txt; done
           if [[ ${#cites[@]} == 0 ]]; then echo "        None"; fi
           rm -f ${rootname}Out.txt
           mv tout.txt "${rootname}Out.txt"
           rm -f html.txt
           rm -f finHtml.html
           rm -f ${rootname}.html
           #
           joblink=$(sed -n "2p" "${rootname}STATUS-1.txt")
           rm -f ${rootname}STATUS-2.txt
           touch ${rootname}STATUS-2.txt
           echo "$(date +'%Y-%m-%dT%H:%M:%SZ') $(($(date +%s%N)/1000000))" >> "${rootname}STATUS-2.txt"
           echo ${joblink} >> ${rootname}STATUS-2.txt
           # If we made it to this point, means that we at least made an attempt at compilation and there was no
           # server or internet issues, so we will be able to publish an errors file.  Let's put the link to it now: 
           outlink="https://raw.githubusercontent.com/${{ github.repository }}/${GITHUB_REF_NAME}/${rootname}OUT.txt"
           echo ${outlink} >> ${rootname}STATUS-2.txt
           #
           if [$FATALERRORS]; then
              # Create an html file with the compilation errors.  This file will be turned into a pdf file
              # by the gooTeX script and displayed in lieu of a pdf compilation of the document. 
              # 
              # replace the last line of STATUS-2 file with "html"
              echo "html"  >> "${rootname}STATUS-2.txt"
              #
              # =======================================================================
              #        construct the html file showing errors, if there were fatal ones
              # =======================================================================
              # There were errors - Create a .html file from the out.txt file
              rm -f "${rootname}.pdf"
              # make sure that long lines are split if they exceed 20 words
              fold -sw 90 "${rootname}Out.txt" > html.txt
              echo "<span style='color:blue;'>FATAL LATEX COMPILATION ERROR(s)</span><br><br>" > finHtml.html
              echo "<i>To view full GitHub Actions output, click on item at top of list here:</i><br>" >> finHtml.html
              echo "<span style='color:blue;'><i>${joblink}</i></span><br>" >> finHtml.html
              echo "<hr><br>" >> finHtml.html
              echo "$timestamp" >> finHtml.html
              # Go through the html.txt file and make the errors red to stand out
              touch red.txt
              red=false
              while IFS= read -r line; do
                 start='^line #[0-9]+'
                 end='^\.__________'
                 if [[ $line =~ $start ]]; then red=true; elif [[ $line =~ $end ]]; then red=false; fi
                 thisline="$( echo "$line" | sed -r 's/^line #/Line #/g' | sed -r 's/^\.__________/___________/g' )"
                 if $red; then
                    echo "<span style='color:red;'>$thisline</span>" >> red.txt
                 else
                    echo "$thisline" >> red.txt
                 fi
              done < "html.txt"
              sed ':a;N;$!ba;s/\n/<br>\n/g;s/ /\&nbsp;/g;s/span\&nbsp;style/span style/g' red.txt >> finHtml.html
              rm -f ${rootname}.html
              mv -f finHtml.html "${rootname}.html"
              rm -f red.txt
           else
              # replace the last line with "pdf" 
              echo "pdf" >> "${rootname}STATUS-2.txt"
           fi
           # finalize the compilation output file by putting a few sentences at the top
           rm -f fin.txt
           touch fin.txt
           echo "$timestamp" >> fin.txt
           echo "LATEX COMPILATION ERRORS and WARNINGS" >> fin.txt
           echo "" >> fin.txt
           echo "To view full GitHub Actions output, click on item at top of list here:" >> fin.txt
           echo "$joblink" >> fin.txt
           echo "" >> fin.txt
           while IFS= read -r line; do
              thisline="$( echo "$line" | sed -r 's/^line #/Line #/g' | sed -r 's/^=----/-----/g' )"
              echo "$thisline" >> fin.txt
           done < "${rootname}Out.txt"
           mv -f fin.txt "${rootname}Out.txt"
           echo "STATUS2=${rootname}STATUS-2.txt" >> $GITHUB_ENV
           echo "HTML=${rootname}.html" >> $GITHUB_ENV
           echo "OUT=${rootname}Out.txt" >> $GITHUB_ENV
        continue-on-error: true
        #          
      - name: upload final version of STATUS-2 file to google drive
        if: ${{ always() && hashFiles(env.STATUS2) }}
        uses: nextDriveIoE/google-drive-upload-action@v2
        with:
          target: ${{ env.STATUS2 }}
          credentials: ${{ secrets.SERVICE_ACCOUNT_CREDENTIALS }}
          parent_folder_id: ${{ github.event.inputs.folderid }}
          overwrite: true
        continue-on-error: true
        #
      - name: Make notice of completion available to other jobs 
        uses: actions/upload-artifact@v4
        with:
          name: status2-artifact
          path: ${{ github.event.inputs.file2compile }}STATUS-2.txt
          overwrite: true
        continue-on-error: true
        #
      - name: upload final version of HTML compilation error file to google drive
        if: ${{ always() && hashFiles(env.HTML) }}
        uses: nextDriveIoE/google-drive-upload-action@v2
        with:
          target: ${{ env.HTML }}
          credentials: ${{ secrets.SERVICE_ACCOUNT_CREDENTIALS }}
          parent_folder_id: ${{ github.event.inputs.folderid }}
          overwrite: true
        continue-on-error: true
        #
      - name: Make html version of log file (if created) available to other jobs 
        if: ${{ always() && hashFiles(env.HTML) }}
        uses: actions/upload-artifact@v4
        with:
          name: finalized-compilationlog-html-artifact
          path: ${{ github.event.inputs.file2compile }}.html
          overwrite: true
        continue-on-error: true
        #
      - name: Make finalized compilation errors available to other jobs 
        if: ${{ always() && hashFiles(env.OUT) }}
        uses: actions/upload-artifact@v4
        with:
          name: finalized-compilationlog-out-artifact
          path: ${{ env.OUT }}
          overwrite: true
        continue-on-error: true

  #_______________________________________________________________________
  #|                                                                      |
  #|                   UPLOAD THE FILES TO THE REPOSITRY                  |
  #|______________________________________________________________________|
  updateRepo:
    needs: [build_latex,processLogFile]
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write
      #
    steps:
      - name: Clone repo
        uses: actions/checkout@v4
        #
      - name: download STATUS 1 file
        uses: actions/download-artifact@v4
        with:
          name: status1-artifact
          path: ${{ env.STATUS1 }}
          #
      - name: download STATUS 2 file
        uses: actions/download-artifact@v4
        with:
          name: status2-artifact
          path: ${{ env.STATUS2 }}
          #
      - name: Download PDF
        uses: actions/download-artifact@v4
        with:
          name: pdf-artifact
        continue-on-error: true
        #
      - name: Download pruned bibfile
        uses: actions/download-artifact@v4
        with:
          name: pruned-bib-artifact
        continue-on-error: true
        #
      - name: Download html compilation error file (if exists)
        uses: actions/download-artifact@v4
        with:
          name: finalized-compilationlog-html-artifact
        continue-on-error: true
        #
      - name: Download txt compilation error OUT file (if exists)
        uses: actions/download-artifact@v4
        with:
          name: finalized-compilationlog-out-artifact
        continue-on-error: true
        #        
      - name: Download compressed images
        uses: actions/download-artifact@v4
        with:
          name: images-tar-artifact
        continue-on-error: true
        #
      - name: get newly compressed images
        if: ${{ always() && hashFiles('compressedFiles.tar') }}
        run: |
          tar -xvf compressedFiles.tar > filelist.txt
          # remove the original images that were uncompressed
          sed -ri "s/\.([^\n]+)(\n|$)/UNCOMPRESSED\.\1/g" "filelist.txt"
          # use the filelist to remove the files
          rm -f $( cat filelist.txt )
          rm -f compressedFiles.tar
          rm -f filelist.txt
        continue-on-error: true
        #
      - name: post finalized compilation errors and notice of completion to the repository
        run: |
           git config --global user.email "email@gmail.com"
           git config --global user.name "github actions"
           git add .
           git commit -m "freshly compiled files"
           git push
        continue-on-error: true
