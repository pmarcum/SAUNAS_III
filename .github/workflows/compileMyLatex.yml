name: Build LaTeX document and Release PDF
#
#   it works finally! 
#   what to do:  copy paste the section that processes warnings into a section that processes errors, as well as bib errors.  
#   then you need to fix rest of the code that turns into pdf if serious errors exist. 
# Version: 07142024
#
# Is executed at gooTeX script's prompt. 
# ############################
#      Pamela M. Marcum      #
#  first created: 07/14/2024 #
# ############################
# Controls when the action will run.
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
# https://mrturkmen.com/posts/build-release-latex/
# https://github.com/PHPirates/travis-ci-latex-pdf/blob/master/.github/workflows/texlive.yml
# https://github.com/teatimeguest/setup-texlive-action  includes caching

on:
  workflow_dispatch:
    inputs: 
      file2compile:
         description: "Name of .tex file to compile, without the .tex part"
         required: true
         default: "main"        
         
jobs:
  # followed: https://dev.to/dessygil/
  #   how-to-automatically-update-resume-on-your-personal-site-from-overleaf-1fld
  # https://superuser.com/questions/1455483/how-to-get-wsl-use-git-bash-to-run-a-latexmk-command
  # https://www.overleaf.com/learn/latex/TeX_engine_command_line_options_for_pdfTeX%2C_XeTeX_and_LuaTeX
  build_latex:
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write
      
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Get Job ID from GH API
        id: job-id
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          jobs=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id}}/attempts/${{ github.run_attempt }}/jobs)
          job_id=$(echo $jobs | jq -r '.jobs[] | select(.runner_name=="${{ runner.name }}") | .id')
          echo "the job id is: $job_id"
          echo "job_id=$job_id" >> $GITHUB_OUTPUT
        continue-on-error: true
        
      - name: Define environmental variables
        run: |
          link2job="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ steps.job-id.outputs.job_id }}"
          echo "JOBLINK=$link2job" >> $GITHUB_ENV
          echo "CORENAME=${{ github.event.inputs.file2compile }}" >> $GITHUB_ENV
          echo "TEXFILE=${{ github.event.inputs.file2compile }}.tex" >> $GITHUB_ENV
          echo "OUTFILE=${{ github.event.inputs.file2compile }}Out.txt" >> $GITHUB_ENV
          echo "PDFFILE=${{ github.event.inputs.file2compile }}.pdf" >> $GITHUB_ENV
          echo "HTMLFILE=${{ github.event.inputs.file2compile }}.html" >> $GITHUB_ENV
          echo "STARTFILE=${{ github.event.inputs.file2compile }}START.txt" >> $GITHUB_ENV
          echo "FULLLOG=${{ github.event.inputs.file2compile }}_full.log" >> $GITHUB_ENV
          echo "LOG=${{ github.event.inputs.file2compile }}.log" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +'%Y-%m-%dT%H:%M:%SZ') $(($(date +%s%N)/1000000))" >> $GITHUB_ENV
          pdflink="${{ github.server_url }}/${{ github.repository }}/blob/${GITHUB_REF_NAME}/${{ github.event.inputs.file2compile }}.pdf"
          echo "PDFLINK=$pdflink" >> $GITHUB_ENV
        continue-on-error: true

      - name: Create file providing START status file
        run: |
          rm -f $STARTFILE
          touch $STARTFILE
          echo $TIMESTAMP >> $STARTFILE
          echo $JOBLINK   >> $STARTFILE
          echo $PDFLINK   >> $STARTFILE
          echo "precomp"  >> $STARTFILE
        continue-on-error: true
                           
      - name: Remove files to initialize
        run: |
          rm -f $OUTFILE
          rm -f $PDFFILE
          rm -f $HTMLFILE
          rm -f pruned.bib
          rm -f fin.txt
          rm -f $FULLLOG
          rm -f $LOG
          rm -f $CORENAME.aux
          rm -f $CORENAME.bbl
          rm -f $CORENAME.blg
          rm -f $CORENAME.fdb_latexmk
          rm -f $CORENAME.fls
          rm -f $CORENAME.synctex.gz
          rm -f $CORENAME.out
          rm -f inpaperCites.txt
        continue-on-error: true

      - name: Save folder for initialization
        run: |
          git config --global user.email "email@gmail.com"
          git config --global user.name "github actions"
          git add .
          git commit -m "Removing previous status and pdf files"
          git push
        continue-on-error: true

      # https://tex.stackexchange.com/questions/245982/differences-between-texlive-packages-in-linux
      # https://www.overleaf.com/learn/latex/TeX_engine_command_line_options_for_pdfTeX%2C_XeTeX_and_LuaTeX
      # https://github.com/teatimeguest/setup-texlive-action/tree/v3.3.0
      - name: Install texlive
        uses: teatimeguest/setup-texlive-action@v3
        with:
          packages:
            scheme-basic
            collection-mathscience
            collection-bibtexextra
            collection-fontutils
          cache: true
        continue-on-error: true
            
      - name: Compile paper
        id: compilation
        run: |
          latexmk -bibtex -verbose -f -g -pdf -time -file-line-error -view=none -synctex=1 -interaction=nonstopmode "$TEXFILE"
        continue-on-error: true
        
      - name: Prune the bib file
        id: pruneBib
        run: |
          touch pruned.bib
          # going to strip out all the used citations and make a pruned.bib file that can be used as the final 
          # bib file for submission purposes rather than having to use the whole master bib file.  based on the
          # stand-alone "pruneMyBibfile" github action file
          # grab all the citations in the .tex file
          lines=()
          cites=()
          bibfiles=()
          # smoosh all lines together, to make sure no citation is lost because it landed on a separate line from the \cite part
          # and remove all the whitespace
          alllines=$(sed ':a;N;$!ba;s/\n/\|/g;s/ //g' "$TEXFILE")
          # remove square brackets so that we are just left with pure "\citep{  }" or \citet{  }" or \cite{ }, etc.  
          touch inpaperCites.txt
          doesNotUsePruned=true
          sed -r 's/\[[^]]*\]//g;s/\\cite([^{]*)\{/\\cite\{/ig;s/\\cite/\n\\cite/ig' <<<"$alllines" >> inpaperCites.txt
          while IFS= read -r line; do
             if [[ "$(grep -q -E -- "\\\bibliography\{" <<<"$line" )$?" == 0 ]]; then
                biblio=$(sed -r 's/^.*\\bibliography\{([^}]*)\}.*$/\1/' <<<"$line")
                echo " ===============================> "
                echo "biblio: $biblio
                while [[ "$(grep -q -F -- "," <<<"$biblio" )$?" == 0 ]]; do
                   thisbib=$(sed -r 's/^([^,]*)\,.*$/\1/' <<<"$biblio")
                   echo " =======================================> "
                   echo "thisbib:  $thisbib"
                   # remove this piece from citeblock
                   biblio=$(sed -r 's/^[^,]*\,//' <<<"$biblio")
                   if [[ ! "$thisbib" =~ "pruned" ]]; then
                      thisbib=$(sed -r 's/\.bib$//' <<<"$thisbib")
                      echo " ============================================> "
                      echo "now thisbib: $thisbib"
                      bibfiles+=("$thisbib.bib")
                   else
                      doesNotUsePruned=false
                   fi
                done
                if [[ "$biblio" != "" ]]; then bibfiles+=("$biblio"); fi
             fi
             # 
             echo " ============================== does not use pruned ?   $doesNotUsePruned"
             if [[ "$(grep -q -E -- "^\\\cite" <<<"$line" )$?" == 0 ]]; then
                citeblock=$(sed -r 's/^\\cite[a-z]*\{*([^}]*)\}.*$/\1/i' <<<"$line")
                # Now get the individual citations in this block
                while [[ "$(grep -q -E -- "," <<<"$citeblock" )$?" == 0 ]]; do
                   thiscite=$(sed -r 's/^([^,]*)\,.*$/\1/i' <<<"$citeblock")
                   # remove this piece from citeblock
                   citeblock=$(sed -r 's/^[^,]*\,//' <<<"$citeblock")
                   cites+=("$thiscite")
                done
                if [[ "$citeblock" != "" ]]; then cites+=("$citeblock"); fi
             fi
          done < inpaperCites.txt
          rm -f inpaperCites.txt
          if $doesNotUsePruned; then
             bibfiles=($(printf "%s\n" "${bibfiles[@]}" | sort -u))
             cites=($(printf "%s\n" "${cites[@]}" | sort -f -u))
             # Get the .bib files used in this document
             allbib=''
             #for (( i=0; i<${#bibfiles[@]}; i++ )); do
             #   while IFS= read -r line; do allbib+="$line|"; done < "${bibfiles[$i]}"
             #done
             # now break on each citation item, so that a full citation occupies a whole line in the temp file
             # remove unnecessary white space, remove " and ' and ` around the bibcode if such unnecesary things are present
             touch consolidatedBib.tmp
             allbib=$(sed -r 's/(@[a-z][a-z]*) *\{ */\1\{/ig;s/ *\, *\|/\,\|/g;s/\{\"([^"]+)\"\,/\{\1\,/g;s/\{`([^`]+)`\,/\{\1\,/g' <<<"$allbib")
             #allbib=$(sed -r "s/\{'([^']+)'\,/\{\1\,/g" <<<"$allbib")
             #sed -r 's/\} *\|(@[a-z][a-z]*\{)/\}\n\1/ig' <<<"$allbib" >> consolidatedBib.tmp
             ## now look for the citations in this compiled set of citations
             #for (( i=0; i<${#cites[@]}; i++ )); do
             #   if [[ "$(grep -q -F -- "{${cites[$i]},"  consolidatedBib.tmp)$?" == 0 ]]; then
             #      line="$(grep -F -- "{${cites[$i]},"  consolidatedBib.tmp)"
             #      line=$(sed -r 's/\|/\n/g' <<<"$line")
             #      echo "$line" >> pruned.bib
             #   fi
             #done
             rm -f consolidatedBib.tmp
          fi
        continue-on-error: true

      - name: Capture full compilation output
        run: |
          alllog=''
          # ========================  make sure that all lines related to a sentence are all smooshed together into single line
          while IFS= read -r line; do
             # turn any multiple stretches of horizontal white space into a single white space, and any occurances of 
             # square brackets (either with or without numbers) and dollar signs alone on a line, to be removed. 
             newline=$(sed -r 's/  */ /g;s/^ *[[$]]* *$//g;s/^ *\[ *[0-9][0-9]* *\] *$//g' <<<"$line")
             if [[ -n "$newline" ]]; then
                if [[ "${#newline}" -eq 79 ]]; then
                   alllog+="$newline"
                elif [[ "$(grep -q -E -- "^ *[),.][^/]" <<<"$newline" )$?" == 0 ]]; then
                   # if this piece of line only consists of a ) then attach to previous line
                   # remove the last end-of-line character and the attach this new piece of the line
                   alllog=$(sed -r 's/\|$//' <<<"$alllog")
                   alllog+="$newline|"
                elif [[ "$(grep -q -E -- "\, *$" <<<"$newline" )$?" == 0 ]]; then
                   # if this line ends with comma, assume the next line is continuation
                   alllog+="$newline"
                else
                   alllog+="$newline|"
                fi
             fi
          done < "$LOG"
          # write array to file
          touch "$FULLLOG"
          while [[ "$(grep -q -F -- "|" <<<"$alllog" )$?" == 0 ]]; do
             thisline=$(sed -r 's/^([^|]*)\|.*$/\1/' <<<"$alllog" )
             alllog=$(sed -r 's/^[^|]*\|//' <<<"$alllog" )
             echo "$thisline" >> "$FULLLOG"
          done
          if [[ -n "$alllog" ]]; then echo "$alllog" >> "$FULLLOG"; fi
        continue-on-error: true

      - name: Process the errors and warnings
        # remove lines in the output that are unrelated to the latex compilation itself
        run: |
          # ====================================  Set up an array that will hold all the errors and warnings listed in the _full.log
          warnErrArr=()
          # ============= get the errors (in log, labelled as "LaTeX Error") that should make the pdf file not render. 
          readarray -t res < <( grep -F -- "LaTeX Error" "$FULLLOG" )
          for (( i=0; i<${#res[@]}; i++ )); do warnErrArr[${#warnErrArr[@]}]="${res[$i]}"; done
          # ============= now get the warnings, but note that some of the warnings are actually errors (like figure files that are mispelled) and need to 
          # be consolidated with the associated line in the error section here
          readarray -t res < <( grep -F -- "LaTeX Warning" "$FULLLOG" )
          for (( i=0; i<${#res[@]}; i++ )); do warnErrArr[${#warnErrArr[@]}]="${res[$i]}"; done
          # ============= now get the items that are not labeled as 'warning' or "error", but are problems w/ associated line numbers
          # be consolidated with the associated line in the error section here
          readarray -t res < <( grep -E -- '^ *\./.*\.tex:[0-9]+:' "$FULLLOG" )
          for (( i=0; i<${#res[@]}; i++ )); do warnErrArr[${#warnErrArr[@]}]="${res[$i]}"; done
          readarray -t res < <( grep -F -- "Package natbib Warning: Citation" "$FULLLOG" )
          for (( i=0; i<${#res[@]}; i++ )); do warnErrArr[${#warnErrArr[@]}]="${res[$i]}"; done
          rm -f "$FULLLOG"
          #
          # ===================== Now add the relevant line number to front of each error/warning line that specifies a line number
          #
          for (( i=0; i<${#warnErrArr[@]}; i++ )); do
             if [[ "$(grep -q -E -- "on input line [0-9]" <<<"${warnErrArr[$i]}")$?" == 0 ]]; then
                linenum=$(sed -r 's/^.*on input line ([0-9][0-9]*).*/\1/' <<<"${warnErrArr[$i]}")
                blanks="$(sed -r 's/ /ZZ/g' <<<"${warnErrArr[$i]}")"
                if [[ "${warnErrArr[$i]}" =~ "LaTeX Error" ]]; then
                    tmp="$linenum-ERROR-$blanks" 
                elif [[ "${warnErrArr[$i]}" =~ "natbib" ]]; then
                    tmp="$linenum-BIB-$blanks"
                elif [[ "${warnErrArr[$i]}" =~ "undefined" ]]; then
                    tmp="$linenum-ERROR-$blanks"
                elif [[ "${warnErrArr[$i]}" =~ "Undefined" ]]; then
                    tmp="$linenum-ERROR-$blanks"
                else
                    tmp="$linenum-WARNING-$blanks"
                fi
             elif [[ "$(grep -q -E -- "^\.\/[^:][^:]*:[0-9][0-9]*:" <<<"${warnErrArr[$i]}")$?" == 0 ]]; then
                linenum=$(sed -r 's/^[^:]*:([0-9][0-9]*).*/\1/' <<<"${warnErrArr[$i]}")
                blanks="$(sed -r 's/ /ZZ/g' <<<"${warnErrArr[$i]}")"
                if [[ "${warnErrArr[$i]}" =~ "LaTeX Error" ]]; then
                    tmp="$linenum-ERROR-$blanks" 
                elif [[ "${warnErrArr[$i]}" =~ "natbib" ]]; then
                    tmp="$linenum-BIB-$blanks"
                elif [[ "${warnErrArr[$i]}" =~ "undefined" ]]; then
                    tmp="$linenum-ERROR-$blanks"
                elif [[ "${warnErrArr[$i]}" =~ "Undefined" ]]; then
                    tmp="$linenum-ERROR-$blanks"
                else
                    tmp="$linenum-WARNING-$blanks"
                fi
             else
                blanks="$(sed -r 's/ /ZZ/g' <<<"${warnErrArr[$i]}")"
                if [[ "${warnErrArr[$i]}" =~ "LaTeX Error" ]]; then
                    tmp="0-ERROR-$blanks" 
                elif [[ "${warnErrArr[$i]}" =~ "natbib" ]]; then
                    tmp="0-BIB-$blanks"
                elif [[ "${warnErrArr[$i]}" =~ "undefined" ]]; then
                    tmp="0-ERROR-$blanks"
                elif [[ "${warnErrArr[$i]}" =~ "Undefined" ]]; then
                    tmp="0-ERROR-$blanks"
                else
                    tmp="0-WARNING-$blanks"
                fi
             fi
             warnErrArr[$i]="$tmp"
          done
          # ============== sort and remove redundances in the error/warning list
          sorted=($( printf '%s\n' "${warnErrArr[@]}" | sort -r -t- -g -k1,1n -k2 -s ))
          #
          #  #######################   START CONSOLIDATING THE ERRORS ###################
          #
          touch tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          echo "              FATAL ERRORS IN $TEXFILE" >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          echo ""
          echo ""
          echo "=========================================================================================="
          cat tout.txt
          echo "=========================================================================================="
          echo ""
          echo ""
          rm -f thereAreErrors.txt
          error=""
          for (( i=0; i<${#sorted[@]}; i++ )); do
            if [[ "${sorted[$i]}" =~ "-ERROR-" ]]; then error="${sorted[$i]}"; touch thereAreErrors.txt; break; fi
          done
          # if there were no errors, then put 'none'
          if [ ! -f thereAreErrors.txt ]; then echo "      none" >> tout.txt; fi
          while  [ "$error" != "" ]; do
            linenum=$( sed -r 's/^([0-9][0-9]*)\-.*/\1/' <<<"$error" )
            if [[ $linenum > 0 ]]; then
               # look for all occurances of this line number in the error/warning list
               for (( i=0; i<${#sorted[@]}; i++ )); do
                   if [[ "$( grep -q -E -- "^$linenum-" <<<"${sorted[$i]}" )$?" == 0 ]]; then
                      line="$( echo "${sorted[$i]}" | sed -r 's/^[0-9][0-9]*\-[A-Z][A-Z]*\-//' | sed -r 's/ZZ/ /g' )"
                      echo $line >> tout.txt
                      # remove this item from the list
                      sorted[$i]="DONE"
                   fi
               done
               # now look up the line in the .tex file and place underneath
               echo "line #$linenum ----------------------- " >> tout.txt
               head -n $linenum "$TEXFILE" | tail -1 >> tout.txt
            else
               # look up where this line is in the list and remove it from the list
               for (( i=0; i<${#sorted[@]}; i++ )); do
                   if [[ "${sorted[$i]}" =~ "$error" ]]; then
                     line="$( echo "${sorted[$i]}" | sed -r 's/^[0-9][0-9]*\-[A-Z][A-Z]*\-//' | sed -r 's/ZZ/ /g' )"
                     echo $line >> tout.txt
                     # remove from list
                     sorted[$i]="DONE"
                  fi
               done
            fi
            # See if any more errors remain in the list and need to be processed in the next loop iteration
            error=""
            for (( i=0; i<${#sorted[@]}; i++ )); do
               if [[ "${sorted[$i]}" =~ "-ERROR-" ]]; then error="${sorted[$i]}"; break; fi
            done
            echo "=------------------------------------------------------------------------" >> tout.txt
          done
          echo ""
          echo ""
          echo "=========================================================================================="
          cat tout.txt
          echo "=========================================================================================="
          echo ""
          echo "
          #
          #  ######################   START CONSOLIDATING THE WARNINGS ########################
          #
          echo "" >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          echo "              WARNINGS IN $TEXFILE" >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          warning=""
          for (( i=0; i<${#sorted[@]}; i++ )); do
            line="${sorted[$i]}"
            if [[ "$line" =~ "-WARNING-" ]]; then warning="$line"; break; fi
          done
          # if there were no errors, then put 'none'
          if [[ "$warning" = "" ]]; then echo "      none" >> tout.txt; fi
          while  [ "$warning" != "" ]; do
            linenum=$(sed -r 's/^([0-9][0-9]*)\-.*/\1/' <<<"$warning")
            if [[ $linenum > 0 ]]; then
               # look for all occurances of this line number in the error/warning list
               for (( i=0; i<${#sorted[@]}; i++ )); do
                   if [[ "$( grep -q -E -- "^$linenum-" <<<"${sorted[$i]}" )$?" == 0 ]]; then
                      line="$( echo "${sorted[$i]}" | sed -r 's/^[0-9][0-9]*\-[A-Z][A-Z]*\-//' | sed -r 's/ZZ/ /g' )"
                      echo $line >> tout.txt
                      # remove this item from the list
                      sorted[$i]="DONE"
                   fi
               done
               # now look up the line in the .tex file and place underneath
               echo "Line #$linenum ----------------------- " >> tout.txt
               head -n $linenum "$TEXFILE" | tail -1 >> tout.txt
            else
               # look up where this line is in the list and remove it from the list
               for (( i=0; i<${#sorted[@]}; i++ )); do
                   if [[ "${sorted[$i]}" =~ "$warning" ]]; then
                     line="$( echo "${sorted[$i]}" | sed -r 's/^[0-9][0-9]*\-[A-Z][A-Z]*\-//' | sed -r 's/ZZ/ /g' )"
                     echo $line >> tout.txt
                     # remove from list
                     sorted[$i]="DONE"
                  fi
               done
            fi
            # See if any more errors remain in the list and need to be processed in the next loop iteration
            warning=""
            for (( i=0; i<${#sorted[@]}; i++ )); do
               line="${sorted[$i]}"
               if [[ "$line" =~ "-WARNING-" ]]; then warning="$line"; break; fi
            done
            echo "-------------------------------------------------------------------------" >> tout.txt
          done
          #
          #  ##########################   START CITATION PROBLEMS ##########################
          #
          echo " " >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          echo "              CITATION ISSUES IN $TEXFILE" >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          biberr=""
          for (( i=0; i<${#sorted[@]}; i++ )); do
            line="${sorted[$i]}"
            if [[ "$line" =~ "-BIB-" ]]; then  biberr="$line"; break; fi
          done
          # if there were no errors, then put 'none'
          if [[ "$biberr" = "" ]]; then echo "      none" >> tout.txt; fi
          while  [ "$biberr" != "" ]; do
            linenum=$(sed -r 's/^([0-9][0-9]*)\-.*/\1/' <<<"$biberr")
            if [[ $linenum > 0 ]]; then
               # look for all occurances of this line number in the error/biberr list
               for (( i=0; i<${#sorted[@]}; i++ )); do
                   if [[ "$( grep -q -E -- "^$linenum-" <<<"${sorted[$i]}" )$?" == 0 ]]; then
                      line="$( echo "${sorted[$i]}" | sed -r 's/^[0-9][0-9]*\-[A-Z][A-Z]*\-//' | sed -r 's/ZZ/ /g' )"
                      echo $line >> tout.txt
                      # remove this item from the list
                      sorted[$i]="DONE"
                   fi
               done
               # now look up the line in the .tex file and place underneath
               echo "Line #$linenum ----------------------- " >> tout.txt
               head -n $linenum "$TEXFILE" | tail -1 >> tout.txt
            else
               # look up where this line is in the list and remove it from the list
               for (( i=0; i<${#sorted[@]}; i++ )); do
                   if [[ "${sorted[$i]}" =~ "$biberr" ]]; then
                     line="$( echo "${sorted[$i]}" | sed -r 's/^[0-9][0-9]*\-[A-Z][A-Z]*\-//' | sed -r 's/ZZ/ /g' )"
                     echo $line >> tout.txt
                     # remove from list
                     sorted[$i]="DONE"
                  fi
               done
            fi
            # See if any more errors remain in the list and need to be processed in the next loop iteration
            biberr=""
            for (( i=0; i<${#sorted[@]}; i++ )); do
               line="${sorted[$i]}"
               if [[ "$line" =~ "-BIB-" ]]; then biberr="$line"; break; fi
            done
            echo "-------------------------------------------------------------------------" >> tout.txt
          done
          echo "-------------------------------------------------------------------------" >> tout.txt 
        continue-on-error: true
          
      - name: Gather up list of references
        run: |     
          # https://stackoverflow.com/questions/57788813/grep-return-0-if-no-match
          # squash.io/extracting=numbers-from-strings-in-bash
          # https://stackoverflow.com/questions/17883661/how-to-extract-numbers-from-a-string
          # https://stackoverflow.com/questions/2624300/save-part-of-matching-pattern-to-variable
          echo "" >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          echo "              LIST OF REFERENCES IN $TEXFILE" >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          # create an array of just the bibcodes
          readarray -t res < <( grep -E -- "@" pruned.bib )
          if [[ ${#res[@]} -gt 0 ]]; then echo "Number of citations: ${#res[@]}" >> tout.txt; fi
          for (( i=0; i<${#res[@]}; i++ )); do
             line="$( echo "${res[$i]}" | sed -r 's/^[^{]*\{//' | sed -r 's/\,//' )"
             echo "$line" >> tout.txt
          done
          if [[ ${#res[@]} == 0 ]]; then echo "        None"; fi
          mv tout.txt "$OUTFILE"
        continue-on-error: true

      - name: Convert errors to html file
        if: ${{ always() && hashFiles('thereAreErrors.txt') }}
        run: |
          # determine if there were no errors, meaning that errors.txt is empty file. If so, place the word none under the
          # banner of this section in output file. But if there were errors, then remove the pdf file so that the pdf file
          # that gets shown in gooTeX is the compilation errors rather than a mangled pdf.
          # create a .html file from the out.txt file, then convert the html to pdf
          rm -f tout.txt
          rm -f html.txt
          rm -f "$PDFFILE"
          # make sure that long lines are split if they exceed 20 words
          fold -sw 90 "$OUTFILE" > html.txt
          echo "<span style='color:blue;'>FATAL LATEX COMPILATION ERROR(s)</span><br><br>" > finHtml.html
          echo "<i>To view full GitHub Actions output, click on item at top of list here:</i><br>" >> finHtml.html
          echo "<span style='color:blue;'><i>${JOBLINK}</i></span><br>" >> finHtml.html
          echo "<hr><br>" >> finHtml.html
          echo "$TIMESTAMP" >> finHtml.html
          # Go through the html.txt file and make the errors red to stand out
          touch red.txt
          red=false
          while IFS= read -r line; do
             start='^line #[0-9]+'
             end='^=-----'
             if [[ $line =~ $start ]]; then red=true; elif [[ $line =~ $end ]]; then red=false; fi
             thisline="$( echo "$line" | sed -r 's/^line #/Line #/g' | sed -r 's/^=----/-----/g' )"
             if $red; then
                echo "<span style='color:red;'>$thisline</span>" >> red.txt
             else
                echo "$thisline" >> red.txt
             fi
          done < "html.txt"
          sed ':a;N;$!ba;s/\n/<br>\n/g;s/ /\&nbsp;/g;s/span\&nbsp;style/span style/g' red.txt >> finHtml.html
          mv -f finHtml.html "$HTMLFILE"
          rm -f red.txt
          echo '-------------------------------------------------------------'
          cat "$HTMLFILE"
          rm -f $STARTFILE
          touch $STARTFILE
          echo $TIMESTAMP >> $STARTFILE
          echo $JOBLINK   >> $STARTFILE
          echo $PDFLINK   >> $STARTFILE
          echo "html"  >> $STARTFILE
        continue-on-error: true
        
      #- name: Make the error PDF file
      #  if: ${{ always() && hashFiles('finHtml.html') }}
      #  uses: fifsky/html-to-pdf-action@master
      #  with:
      #    htmlFile: finHtml.html
      #    outputFile: "$PDFFILE"
      #    pdfOptions: '{"margin": {"top": "0.2in", "bottom": "0.3in", "left": "0.4in", "right": "0.3in" }}'
      #  continue-on-error: true

      - name: Finalize compilation warning and errors output
        run: |
          if [[ ! -n thereAreErrors.txt ]]; then 
             rm -f $STARTFILE
             touch $STARTFILE
             echo $TIMESTAMP >> $STARTFILE
             echo $JOBLINK   >> $STARTFILE
             echo $PDFLINK   >> $STARTFILE
             echo "pdf"  >> $STARTFILE
          fi
          # finalize the compilation output file by putting a few sentences at the top
          touch fin.txt
          echo "$TIMESTAMP" >> fin.txt
          echo "LATEX COMPILATION ERRORS and WARNINGS" >> fin.txt
          echo "" >> fin.txt
          echo "To view full GitHub Actions output, click on item at top of list here:" >> fin.txt
          echo "$JOBLINK" >> fin.txt
          echo "====================================================================================================" >> fin.txt
          while IFS= read -r line; do
             thisline="$( echo "$line" | sed -r 's/^line #/Line #/g' | sed -r 's/^=----/-----/g' )"
             echo "$thisline" >> fin.txt
          done < "$OUTFILE"
          mv -f fin.txt "$OUTFILE"
        continue-on-error: true

      - name: Clean up folder before saving files
        run: |
          rm -f fin.txt
          rm -f $FULLLOG
          rm -f $LOG
          rm -f $CORENAME.aux
          rm -f $CORENAME.bbl
          rm -f $CORENAME.blg
          rm -f $CORENAME.fdb_latexmk
          rm -f $CORENAME.fls
          rm -f inpaperCites.txt
          rm -f $CORENAME.synctex.gz
          rm -f $CORENAME.out
        continue-on-error: true
      
      - name: Post new files to folder
        run: |
          git config --global user.email "email@gmail.com"
          git config --global user.name "github actions"
          git add .
          git commit -m "Upload changed files"
          git push
        continue-on-error: true
 
