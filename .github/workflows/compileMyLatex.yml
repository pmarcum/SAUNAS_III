name: Build LaTeX document and Release PDF
# Version: 07142024
#
# Is executed at gooTeX script's prompt. 
# ############################
#      Pamela M. Marcum      #
#  first created: 07/14/2024 #
# ############################
# Controls when the action will run.
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
# https://mrturkmen.com/posts/build-release-latex/

on:
  workflow_dispatch:
    inputs: 
      file2compile:
         description: "Name of .tex file to compile, without the .tex part"
         required: true
         default: "main"
jobs:
  # followed: https://dev.to/dessygil/
  #   how-to-automatically-update-resume-on-your-personal-site-from-overleaf-1fld
  build_latex:
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Remove old status note and pdf file
        id: removeOldStatusAndPdf
        run: |
          rm -f "${{ github.event.inputs.file2compile }}_status.txt"
          rm -f "${{ github.event.inputs.file2compile }}.pdf"
          
      - name: Commit the modified folder and put the change
        run: |
          git config --global user.email "email@gmail.com"
          git config --global user.name "github actions"
          git add .
          git commit -m "Removing previous status and pdf files"
          git push
        continue-on-error: true
                  
      - name: Tectonic Cache
        uses: actions/cache@v3
        # https://github.com/marketplace/actions/setup-tectonic
        # https://tectonic-typesetting.github.io/en-US/
        with:
          path: ~/.cache/Tectonic
          # can add ${{ hashFiles('**/*.tex') }} to invalidate cache on file changes
          key: ${{ runner.os }}-tectonic
          restore-keys: |
            ${{ runner.os }}-tectonic
            
      - name: Tectonic Setup
        uses: wtfjoke/setup-tectonic@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Tectonic
        id: compilation
        run: |
          tectonic -p -Z continue-on-errors ${{ github.event.inputs.file2compile }}.tex &> compileout.txt
        continue-on-error: true

      - name: Get timestamp
        id: date
        run: echo "TIMESTAMP=$(date +'%Y-%m-%dT%H:%M:%SZ') $(($(date +%s%N)/1000000))" >> $GITHUB_ENV
        continue-on-error: true
        
      - name: Capture compilation output
        id: compileWarnings
        # remove lines in the output that are unrelated to the latex compilation itself
        # First, move lines that should have been the ending of the previous line, to the end of that previous line
        run: |
          # The below smooshes the entire output file together as a single line by replacing the end-of-line with
          # a special character (\x0), removes extra white space, removes white space preceding and proceeding colons, 
          # and performs replacements using the special character to insure that each error or warning appears on a single 
          # line and does not spill over into a separate line.
          #cat compileout.txt
          sed ':a;N;$!ba;s/\n/\x0/g' compileout.txt | \
            sed -r 's/\x0+/\x0/g' | \
            sed -r 's/  */ /g' | \
            sed -r 's/ *\x0 */\x0 /g' | \
            sed -r 's/\ *\: */\: /g' | \
            sed -r 's/\[\]//g' | \
            sed -r 's/\$\$*//g' | \
            sed -r 's/\|//g' | \
            sed -r 's/\x0\x0*/\x0/g' | \
            sed -r 's/\x0+([a-zA-Z ]+)\:/\n\1\:/g' | \
            sed -r 's/undefined control sequence\.\x0/undefined control sequence\. /gi' | \
            sed -r 's/\.\x0/\.\n/g' | \
            sed -r 's/\x0+//g' | \
            sed -r 's/(lines [0-9\-]+) *\(/\1\n\(/g' | \
            sed -r 's/(\[[0-9]+\]) *\(/\1\n\(/g' | \
            sed -r 's/^ *//;s/ *$//' > allout.txt
          # display all the errors
          echo "${{ env.TIMESTAMP }}" > tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          echo "   ERRORS IN ${{  github.event.inputs.file2compile }}.tex" >> tout.txt
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          # The below pulls out only those lines that are directly related to warnings and errors within the .tex file 
          # This step is why we needed everything related to a given error to appear in a single line and did the formatting above.
          # https://stackoverflow.com/questions/75534451/using-grep-output-as-pattern-for-a-second-grep
          echo ": ${{ github.event.inputs.file2compile }}.tex"
          grep -i error allout.txt > tmptmp.txt
          echo ""
          echo "***********************"
          cat tmptmp.txt
          grep ": ${{ github.event.inputs.file2compile }}.tex" tmptmp.txt > errors.txt
          echo "4"
          cat errors.txt
          echo "5"
          #sort tmptmp.txt | \
          #   uniq > errors.txt
          rm -f tmptmp.txt
          ## squash.io/extracting=numbers-from-strings-in-bash
          ## https://stackoverflow.com/questions/17883661/how-to-extract-numbers-from-a-string
          ## https://stackoverflow.com/questions/2624300/save-part-of-matching-pattern-to-variable
          #while IFS= read -r line; do
          #  echo $line >> tout.txt
          #  linenum=$(echo $line | sed 's/^.*: \([0-9]*\):.*/\1/')
          #  head -n $linenum ${{ github.event.inputs.file2compile }}.tex | tail -1 >> tout.txt
          #  echo "-------------------------------------------------------------------------" >> tout.txt
          #done < errors.txt
          #grep -i warning allout.txt | \
          #   grep ": ${{ github.event.inputs.file2compile }}.tex" > warnings.txt
          ##sort tmptmp.txt | \
          ##   uniq > warnings.txt
          ##rm -f tmptmp.txt
          #echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
          #cat warnings.txt
          #echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
          #echo "" >> tout.txt
          #echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          #echo "   WARNINGS IN ${{  github.event.inputs.file2compile }}.tex" >> tout.txt
          #echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          #while IFS= read -r line; do
          #  echo $line >> tout.txt
          #  linenum=$(echo $line | sed 's/^.*: \([0-9]*\):.*/\1/')
          #  head -n $linenum ${{ github.event.inputs.file2compile }}.tex | tail -1 >> tout.txt
          #  echo "-------------------------------------------------------------------------" >> tout.txt
          #done < warnings.txt
          #echo "" >> tout.txt
          #echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          #echo "   CITATION ISSUES IN ${{  github.event.inputs.file2compile }}.tex " >> tout.txt
          #echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          # now look for problems with the bibliography. In the first pass through the compilation, every citation will raise a warning flag.  But
          # eventually, those warnings will be resolved except for citations that have typos in the .tex file and/or are missing from the .bib file. 
          # The below gets a list of all citation warnings, and then figures out if any of the errors are unresolved, which would be the case if 
          # the same error appears 6 times (the number of passes can be changed as one of the input options to tectonic, though, so to be safe, let's
          # raise the issue if a citation warning appears at least 3 times. 
          # https://stackoverflow.com/questions/46324444/grep-for-words-containing-both-uppercase-and-lowercase-letters
          # https://www.tutorialspoint.com/count-duplicate-lines-in-a-text-file-on-linux
          # https://www.baeldung.com/linux/count-duplicated-lines-text  
          # https://stackoverflow.com/questions/45704484/pipelining-cut-sort-uniq
          #grep -e '[eE]rror' -e '[wW]arning' allout.txt | \
          #   grep -i 'find' | \
          #   grep -i 'database entry' | \
          #   grep -Eo '"[a-zA-Z _0-9\-\+]+"' | \
          #   sed -r 's/"//g' > tmptmp.txt
          #sort tmptmp.txt | \
          #   uniq >> tout.txt
          #rm -f tmptmp.txt
          #echo "" >> tout.txt
          #echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          #echo "                       ERRORS WITH the .BIB FILE" >> tout.txt
          #echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          #grep -e '[eE]rror' -e '[wW]arning' allout.txt | \
          #   grep -e ': ${{ github.event.inputs.file2compile }}.bbl' > tmptmp.txt
          #sort  tmptmp.txt | \
          #   uniq >> tout.txt
          #rm -f tmptmp.txt
          #echo "" >> tout.txt
          #echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          #echo "   LIST OF REFERENCES IN ${{ github.event.inputs.file2compile }}.tex" >> tout.txt
          #echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" >> tout.txt
          #grep -e '[eE]rror' -e '[wW]arning' allout.txt | \
          #   grep -i ': citation' | \
          #   grep -i 'undefined' | \
          #   grep -Eo '`[^ ]+' | \
          #   sed -r 's/`//g' | \
          #   sed -r "s/'//g" > tmptmp.txt
          #sort tmptmp.txt | \
          #   uniq >> tout.txt
          mv tout.txt ${{ github.event.inputs.file2compile }}_out.txt
        continue-on-error: true

        
      - name: Turn failed compilation error to pdf
        id: turnErrorIntoPdf
        if: always() && steps.compilation.outcome != 'success' && steps.compileWarnings.outcome == 'success'
        run: |
          sudo apt-get update
          sudo apt-get install -y libreoffice --fix-missing
          cp ${{ github.event.inputs.file2compile }}_out.txt tmppdf.txt
          libreoffice --convert-to "pdf" tmppdf.txt
          rm -f tmppdf.txt
          mv -f tmppdf.pdf ${{ github.event.inputs.file2compile }}.pdf
        continue-on-error: true

          
      - name: Upload PDF file
        id: uploadPdf
        uses: actions/upload-artifact@v4
        if: always() && (steps.compilation.outcome == 'success' || steps.turnErrorIntoPdf.outcome == 'success')
        with: 
          name: PDF
          path: "${{ github.event.inputs.file2compile }}.pdf"
        continue-on-error: true
        
      - name: Upload compilation output file
        uses: actions/upload-artifact@v4
        if: always() && (steps.compilation.outcome == 'success' || steps.turnErrorIntoPdf.outcome == 'success')
        with: 
          name: compileOutput
          path: "${{ github.event.inputs.file2compile }}_out.txt"
        continue-on-error: true
        
      - name: Publish PDF to repo
        id: releasePdf
        uses: stefanzweifel/git-auto-commit-action@v5
        if: steps.uploadPdf.outcome == 'success'
        with:
          file_pattern: '${{ github.event.inputs.file2compile }}.pdf ${{ github.event.inputs.file2compile }}_out.txt'
          commit_message: 'Newly compiled PDF'
        continue-on-error: true


      - name: Create status note
        id: statusNote
        if: steps.date.outcome == 'success'
        run: | 
          # Make a status file that the Google Script (gooTeX) can ping on to know when the compilation is finished
          echo "${{ env.TIMESTAMP }} ${{ steps.compilation.outcome }} ${{ steps.turnErrorIntoPdf.outcome }} ${{ steps.compileWarnings.outcome }}" > ${{ github.event.inputs.file2compile }}_status.txt
        continue-on-error: true
        
      - name: Upload compilation output file
        if: steps.statusNote.outcome == 'success'
        uses: actions/upload-artifact@v4
        with: 
          name: uploadStatus
          path: "${{ github.event.inputs.file2compile }}_status.txt"
        continue-on-error: true
        
      - name: Publish status to repo
        id: releaseStatus
        uses: stefanzweifel/git-auto-commit-action@v5
        if: steps.statusNote.outcome == 'success'
        with:
          file_pattern: '${{ github.event.inputs.file2compile }}_status.txt'
          commit_message: 'New compilation status'
        continue-on-error: true
