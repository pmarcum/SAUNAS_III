name: Compress Images
# https://safnaj.medium.com/image-compression-for-the-web-using-github-actions-f1156d281cda
# https://github.com/marketplace/actions/image-actions
# https://github.com/MarketingPipeline/Image-Optimizer-Action/blob/main/.github/workflows/example_workflow.yaml
# https://www.smashingmagazine.com/2015/06/efficient-image-resizing-with-imagemagick/
# https://www.overleaf.com/learn/how-to/Optimising_very_large_image_files

on:
  workflow_dispatch:
  
jobs:
  image_compress:
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions: 
      contents: write
    
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install ImageMagick
        uses: mfinelli/setup-imagemagick@v5
        with:
          cache: true
        #run: |
        #  sudo apt install imagemagick

      #- name: Compress images
      #  run: |
      #    #mogrify -path text.png -filter Triangle -define filter:support=2 -thumbnail 300 \
      #    #-unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 \
      #    #-define jpeg:fancy-upsampling=off -define png:compression-filter=5 -define png:compression-level=9 \
      #    #-define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none \
      #    #-colorspace sRGB -strip FIGURES/Composition_NGC5084_poster_v6_paper.png
    
      - name: Compress images
        run: |
          bigfile=500000
          mindpi=300  # optimal dpi for pdf files
          avgimgsize=6.5 # inches
          maxsize=$(echo "(($mindpi * $avgimgsize)+0.5)/1" | bc)
          maxsize=${maxsize%.*}
          echo " max size $maxsize"
          shopt -s globstar
          for imagefile in **; do
            newname=$(echo "${imagefile}" | sed 's/UNCOMPRESSED//')
            fileSize=$( stat -c %s -- "${imagefile}"  )
            echo ""
            echo "======================================================================================================================================="
            echo "Determining if ${newname} needs to be compressed"
            echo "Is the current file size:  ${fileSize}   bigger than the target maximum size: ${bigfile} ?"
            if [[ -f "${imagefile}" && ! -L "${imagefile}" && "$fileSize" -gt "$bigfile" && "${imagefile}" =~ UNCOMPRESSED\. ]]; then
              echo "${newname} needs to be resized"
              # Get the current dimensions of the image
              dimensions=$(identify -format "%w %h" "${imagefile}")
              read -r currentWidth currentHeight <<< "$dimensions"
              echo "the original image dimensions:  $currentWidth  $currentHeight"
              # determine which, if either, dimension exceeds the max desirable size (maxsize)
              if [[ $currentWidth > $currentHeight && $currentWidth > $maxsize ]]; then
                newWidth=$maxsize
                newHeight=$(echo "(($currentHeight * $maxsize) / $currentWidth) + 0.5" | bc)
                newHeight=${newHeight%.*}
              else
                newHeight=$maxsize
                newWidth=$(echo "(($currentWidth * $maxsize) / $currentHeight) + 0.5" | bc)
                newWidth=${newWidth%.*}
              fi
              echo "the new image dimensions:  $newWidth  $newHeight"
              qualityValue=30
              if [[ "$fileSize" -gt 10000000 ]]; then
                qualityValue=90
              elif [[ "$fileSize" -gt 5000000 ]]; then
                qualityValue=80
              elif [[ "$fileSize" -gt 3000000 ]]; then
                qualityValue=67
              elif [[ "$fileSize" -gt 2000000 ]]; then
                qualityValue=50
              fi
              # Note: the quality value seems to not matter at all.  The size seems to be the main factor behind the size of the file.
              mogrify -filter Triangle -define filter:support=2 -unsharp 0.25x0.08+8.3+0.045 -dither None -quality ''"$qualityValue"'' \
                -define jpeg:fancy-upsampling=off -define png:compression=filter=5 -define png:compression-level=9 \
                -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB \
                -strip -thumbnail ''"${newWidth}x${newHeight}>"'' "${imagefile}"
              mv -f "${imagefile}" "${newname}"
            elif [[ -f "${imagefile}" && ! -L "${imagefile}" && "${imagefile}" =~ UNCOMPRESSED\. ]]; then
              echo "the image size is lower than the trigger size and therefore is not going to be compressed."
              mv -f "${imagefile}" "${newname}"
            fi
          done

      #- name: Compress images
      #  id: resize-images
      #  uses: petems/image-resizer-gh-action@master
      #  with:
      #    target: FIGURES/HST_Torus_model.png FIGURES/NGC5084_F702W.png # directory to look for images in
      #    dimensions: 90%   # parameter to change size
      #    widthLimit: 1024  # max width to check
      #    heightLimit: 768  # max height to check

      - name: Complete initialization of folder
        run: |
          git config --global user.email "email@gmail.com"
          git config --global user.name "github actions"
          git add .
          git commit -m "Upload changed files"
          git push
        continue-on-error: true

          
