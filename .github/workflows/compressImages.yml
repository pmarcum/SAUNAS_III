name: Compress Images
# https://safnaj.medium.com/image-compression-for-the-web-using-github-actions-f1156d281cda
# https://github.com/marketplace/actions/image-actions
# https://github.com/MarketingPipeline/Image-Optimizer-Action/blob/main/.github/workflows/example_workflow.yaml
# https://www.smashingmagazine.com/2015/06/efficient-image-resizing-with-imagemagick/
# https://www.overleaf.com/learn/how-to/Optimising_very_large_image_files

on:
  workflow_dispatch:
  
jobs:
  image_compress:
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions: 
      contents: write
    
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install ImageMagick
        uses: mfinelli/setup-imagemagick@v5
        with:
          cache: true
    
      - name: Compress images
        run: |
          bigfile=500000
          minDpi=150  # optimal dpi for pdf files
          maxWidthInches=6.5   #inches
          maxHeightInches=9.0  #inches
          maxWidth=$(echo "(($minDpi * $maxWidthInches)+0.5)/1" | bc)
          maxWidth=${maxWidth%.*}
          maxHeight=$(echo "(($minDpi * $maxHeightInches)+0.5)/1" | bc)
          maxHeight=${maxHeight%.*}
          shopt -s globstar
          for imagefile in **/*UNCOMPRESSED.*; do
            newname=$(echo "${imagefile}" | sed 's/UNCOMPRESSED//')
            pdfname=$(echo "${newname}" | sed 's/\..*$/\.pdf/')
            fileSize=$( stat -c %s -- "${imagefile}"  )
            echo ""
            echo "=================================================================================================================="
            echo "Determining if ${newname} needs to be compressed"
            echo "Is the current file size:  ${fileSize}   bigger than the target maximum size: ${bigfile} ?"
            echo "${pdfname}"
            if [[ -f "${imagefile}" && ! -L "${imagefile}" && "$fileSize" -gt "$bigfile" && "${imagefile}" =~ UNCOMPRESSED\. ]]; then
              echo "${newname} needs to be resized"
              # Get the current dimensions of the image
              dimensions=$(identify -format "%w %h" "${imagefile}")
              read -r origWidth origHeight <<< "$dimensions"
              echo "the original image dimensions:  $origWidth  $origHeight"
              # determine which, if either, dimension exceeds the max desirable size (origWidth origHeight)
              if [[ "$origWidth" -gt "$origHeight" && "$origWidth" -gt "$maxWidth" ]]; then
                echo "======> the width is larger than the height, setting new width to $maxWidth"
                newWidth=$maxWidth
                newHeight=$(echo "(($origHeight * $newWidth) / $origWidth) + 0.5" | bc)
                newHeight=${newHeight%.*}
              elif [[ "$origWidth" -lt "$origHeight" && "$origHeight" -gt "$maxHeight" ]]; then
                echo "=====> the height is larger than the width, setting new height to $maxHeight"
                newHeight=$maxHeight
                newWidth=$(echo "(($origWidth * $newHeight) / $origHeight) + 0.5" | bc)
                newWidth=${newWidth%.*}
              elif [[ "$origWidth" -gt "$maxWidth" ]]; then
                echo "............... the width is larger than allowable width"
                newWidth=$maxWidth
                newHeight=$(echo "(($origHeight * $newWidth) / $origWidth) + 0.5" | bc)
                newHeight=${newHeight%.*}
              elif [[ "$origHeight" -gt "$maxHeight" ]]; then
                echo "=====> the height is larger than the width, setting new height to $maxHeight"
                newHeight=$maxHeight
                newWidth=$(echo "(($origWidth * $newHeight) / $origHeight) + 0.5" | bc)
                newWidth=${newWidth%.*}
              else
                newHeight=$maxHeight
                newWidth=$origWidth              
              fi
              echo "the new image dimensions:  $newWidth  $newHeight"
              qualityValue=82
              # Note: the quality value seems to not matter at all.  The size seems to be the main factor behind the size of the file.
              mogrify -filter Triangle -define filter:support=2 -unsharp 0.25x0.08+8.3+0.045 -dither None -quality ''"${qualityValue}"'' \
                -define jpeg:fancy-upsampling=off -define png:compression=filter=5 -define png:compression-level=9 \
                -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB \
                -strip -thumbnail ''"${newWidth}x${newHeight}>"'' "${imagefile}"
              mv -f "${imagefile}" "${newname}"
            elif [[ -f "${imagefile}" && ! -L "${imagefile}" && "${imagefile}" =~ UNCOMPRESSED\. ]]; then
              echo "the image size is lower than the trigger size and therefore is not going to be compressed."
              mv -f "${imagefile}" "${newname}"
            fi
          done

      - name: Complete initialization of folder
        run: |
          git config --global user.email "email@gmail.com"
          git config --global user.name "github actions"
          git add .
          git commit -m "Upload changed files"
          git push
        continue-on-error: true

          
